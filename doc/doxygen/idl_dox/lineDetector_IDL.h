/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_LINEDETECTOR_IDL_H
#define YARP_THRIFT_GENERATOR_SERVICE_LINEDETECTOR_IDL_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/sig/Vector.h>

/**
 * lineDetector_IDL
 * IDL Interface to lineDetector services.
 */
class lineDetector_IDL :
        public yarp::os::Wire
{
public:
    // Constructor
    lineDetector_IDL();

    /**
     * Start detection of start/finish line.
     * @param line string indicating the line to detect, start-line or finish-line.
     * @param timeout optional timeout in seconds, if > 0.
     * @return true on success/failure.
     */
    virtual bool detect(const std::string& line, const std::int32_t timeout = 0);

    /**
     * Get the pose of the line.
     * @param line string indicating the line to detect, start-line or finish-line.
     * @return pose of the line with respect to the world frame (start-line).
     */
    virtual yarp::sig::Vector get_line_pose(const std::string& line);

    /**
     * Reset lines.
     * @return true/false on success/failure.
     */
    virtual bool reset();

    /**
     * Stop detection.
     * @return true/false on success/failure.
     */
    virtual bool stop();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_LINEDETECTOR_IDL_H
